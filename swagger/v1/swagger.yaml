---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/user/{example_id}/example":
    post:
      summary: 'API: Create example data'
      tags:
      - Example
      parameters:
      - name: Accept-Language
        in: header
        example: ja
        schema:
          type: string
      - name: example_id
        required: true
        in: path
        example: '1'
        description: Prefecture ID
      security:
      - bearer_auth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    type: object
                    "$ref": "#/components/schemas/detail_example"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unauthorized"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/not_found"
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unprocessable_entity"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/server_error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  example: 観光スポット
                  description: Category of the custom data
                name:
                  type: string
                  example: 大通公園
                  description: Name of the custom data
                description:
                  type: string
                  example: "「雪まつり」の会場としても全国に知られる有名スポット"
                  description: Description of the custom data
                url:
                  type: string
                  example: https://odori-park.jp/
                  description: URL of the custom data's website
        required: true
  "/api/v1/user/example/{id}":
    get:
      summary: 'API: Get detail example'
      tags:
      - Example
      parameters:
      - name: Accept-Language
        in: header
        example: ja
        schema:
          type: string
      - name: id
        required: true
        in: path
        example: '1'
        description: Example ID
      security:
      - bearer_auth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  prefecture:
                    type: object
                    "$ref": "#/components/schemas/detail_example"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/not_found"
  "/api/v1/user/example":
    get:
      summary: 'API: Get list all example'
      tags:
      - Example
      parameters:
      - name: Accept-Language
        in: header
        example: ja
        schema:
          type: string
      - name: page
        in: query
        example: 1
        description: Page number of list items
        schema:
          type: integer
      security:
      - bearer_auth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  prefectures:
                    type: array
                    items:
                      type: object
                      "$ref": "#/components/schemas/detail_example"
                  meta:
                    type: object
                    properties:
                      pagy_info:
                        type: object
                        "$ref": "#/components/schemas/pagy_info"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
  "/api/v1/users/progoses":
    post:
      summary: Create a new progose
      tags:
      - Progoses
      parameters:
      - name: user_id
        required: true
        in: query
        example: '1'
        description: Users ID
      security:
      - bearer_auth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                    type: object
                    "$ref": "#/components/schemas/detail_progose"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unauthorized"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/not_found"
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/unprocessable_entity"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/server_error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date_test:
                  type: string
                  format: date
                  example: '2024-05-30'
                  description: Date of the test in YYYY-MM-DD
                range:
                  type: integer
                  example: 1
                  description: Range score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                range_evaluation:
                  type: string
                  example: Good
                  description: Evaluation of range score
                accuracy:
                  type: integer
                  example: 2
                  description: Accuracy score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                accuracy_evaluation:
                  type: string
                  example: Good
                  description: Evaluation of accuracy score
                fluency:
                  type: integer
                  example: 3
                  description: Fluency score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                fluency_evaluation:
                  type: string
                  example: Needs improvement
                  description: Evaluation of fluency score
                interaction:
                  type: integer
                  example: 4
                  description: Interaction score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                interaction_evaluation:
                  type: string
                  example: Needs improvement
                  description: Evaluation of interaction score
                coherence:
                  type: integer
                  example: 5
                  description: Coherence score (integer between 1(A1), 2(A2), 3(B1)
                    ... and 5(C2)
                coherence_evaluation:
                  type: string
                  example: Average
                  description: Evaluation of coherence score
                phonology:
                  type: integer
                  example: 6
                  description: Phonology score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                phonology_evaluation:
                  type: string
                  example: Very good
                  description: Evaluation of phonology score
                overall:
                  type: integer
                  example: 1
                  description: Overall score (integer between 1(A1), 2(A2), 3(B1)...
                    and 5(C2)
                overall_evaluation:
                  type: string
                  example: Above average
                  description: Overall evaluation summary
              required:
              - date_test
              - range
              - range_evaluation
              - accuracy
              - accuracy_evaluation
              - fluency
              - fluency_evaluation
              - interaction
              - interaction_evaluation
              - coherence
              - coherence_evaluation
              - phonology
              - phonology_evaluation
              - overall
              - overall_evaluation
        required: true
    get:
      summary: Get list all progose
      tags:
      - Progoses
      security:
      - bearer_auth: []
      parameters:
      - name: items
        in: query
        example: 10
        description: Number of items for each page
        schema:
          type: integer
      - name: page
        in: query
        example: 1
        description: Page number of list items
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  progoses:
                    type: array
                    items:
                      type: object
                      "$ref": "#/components/schemas/basic_progose"
                  meta:
                    type: object
                    properties:
                      pagy_info:
                        type: object
                        "$ref": "#/components/schemas/pagy_info"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/server_error"
  "/api/v1/users/progoses/{id}":
    get:
      summary: 'API: Get detail progose'
      tags:
      - Progoses
      security:
      - bearer_auth: []
      parameters:
      - name: id
        required: true
        in: path
        example: '1'
        description: Progose ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  prefecture:
                    type: object
                    "$ref": "#/components/schemas/detail_progose"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_request"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/not_found"
  "/test":
    get:
      summary: check api
      tags:
      - Test Check
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
            application/xml:
              schema:
                type: object
components:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    detail_example:
      type: object
      properties:
        id:
          type: integer
          example: 1
          description: Custom data's ID
        name:
          type: string
          example: 新井 遼
          description: Name of Custom data
        category:
          type: string
          example: 観光スポット
          description: Category of the Custom data
        description:
          type: string
          example: "「雪まつり」の会場としても全国に知られる有名スポット"
          description: Description of the Custom data
        url:
          type: string
          example: https://odori-park.jp/
          description: URL of the Custom data's website
    detail_progose:
      type: object
      properties:
        date_test:
          type: string
          format: date
          example: '2024-05-30'
          description: Date of the test in YYYY-MM-DD format
        range:
          type: integer
          example: 1
          description: Range score (integer between 1 and 5)
        range_evaluation:
          type: string
          example: Good
          description: Evaluation of range score
        accuracy:
          type: integer
          example: 2
          description: Accuracy score (integer between 1 and 5)
        accuracy_evaluation:
          type: string
          example: Needs improvement
          description: Evaluation of accuracy score
        fluency:
          type: intege
          example: 3
          description: Fluency score (integer between 1 and 5)
        fluency_evaluation:
          type: string
          example: Needs improvement
          description: Evaluation of fluency score
        interaction:
          type: integer
          example: 4
          description: Interaction score (integer between 1 and 5)
        interaction_evaluation:
          type: string
          example: Needs improvement, excellent
          description: Evaluation of interaction score
        coherence:
          type: integer
          example: 5
          description: Coherence score (integer between 1 and 5)
        coherence_evaluation:
          type: string
          example: Average, Needs improvement
          description: Evaluation of coherence score
        phonology:
          type: integer
          example: 6
          description: Phonology score (integer between 1 and 5)
        phonology_evaluation:
          type: string
          example: Very good
          description: Evaluation of phonology score
        overall:
          type: integer
          example: 1
          description: Overall score (integer between 1 and 5)
        overall_evaluation:
          type: string
          example: Above average
          description: Overall evaluation summary
    basic_progose:
      type: object
      properties:
        date_test:
          type: string
          format: date
          example: '2024-05-30'
          description: Date of the test in YYYY-MM-DD format
        range:
          type: integer
          example: 1
          description: Range score (integer between 1 and 5)
        range_evaluation:
          type: string
          example: Good
          description: Evaluation of range score
        accuracy:
          type: integer
          example: 2
          description: Accuracy score (integer between 1 and 5)
        accuracy_evaluation:
          type: string
          example: Needs improvement
          description: Evaluation of accuracy score
        fluency:
          type: intege
          example: 3
          description: Fluency score (integer between 1 and 5)
        fluency_evaluation:
          type: string
          example: Needs improvement
          description: Evaluation of fluency score
        interaction:
          type: integer
          example: 4
          description: Interaction score (integer between 1 and 5)
        interaction_evaluation:
          type: string
          example: Needs improvement, excellent
          description: Evaluation of interaction score
        coherence:
          type: integer
          example: 5
          description: Coherence score (integer between 1 and 5)
        coherence_evaluation:
          type: string
          example: Average, Needs improvement
          description: Evaluation of coherence score
        phonology:
          type: integer
          example: 6
          description: Phonology score (integer between 1 and 5)
        phonology_evaluation:
          type: string
          example: Very good
          description: Evaluation of phonology score
        overall:
          type: integer
          example: 1
          description: Overall score (integer between 1 and 5)
        overall_evaluation:
          type: string
          example: Above average
          description: Overall evaluation summary
    server_error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: B-00001
                description: Type of error
              message:
                type: string
                example: CDCなど外部サービスからHttpレスポンス500場合
                description: Error message
    unauthorized:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: S-00001
                description: Type of error
              message:
                type: string
                example: トークン期限切れなどの場合
                description: Error message
    bad_request:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: C-00001
                description: Type of error
              message:
                type: string
                example: リクエスト異常もしくは実行失敗。詳細理由はBodyのエラーコードを確認して下さい。
                description: Error message
    unprocessable_entity:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              resource:
                type: string
                example: admin
                description: Resource has error
              field:
                type: string
                example: email
                description: Field has error
              code:
                type: string
                example: M-00001
                description: Type of invalid (error or confirm)
              message:
                type: string
                example: メールアドレスもしくはパスワードが正しくありません
                description: Message has error
    not_found:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              resource:
                type: string
                example: custom_data
                description: Resource has error
              code:
                type: string
                example: B-00003
                description: Type of invalid (error or confirm)
              message:
                type: string
                example: 該当する情報は見つかりませんでした。
                description: Error message
    pagy_info:
      type: object
      properties:
        count:
          type: integer
          example: 1
          description: Total record
        page:
          type: integer
          example: 1
          description: Current page
        outset:
          type: integer
          example: 1
          description: Initial offset
        items:
          type: integer
          example: 1
          description: Total record per page
        last:
          type: integer
          example: 1
          description: Last page
        pages:
          type: integer
          example: 1
          description: Total page
        offset:
          type: integer
          example: 1
          description: Total items skip
        from:
          type: integer
          example: 1
          description: Index of first record in page
        to:
          type: integer
          example: 1
          description: Index of last record in page
        in:
          type: integer
          example: 1
          description: Total record in page
        prev:
          type: integer
          example: 1
          description: Before page
        next:
          type: integer
          example: 1
          description: After page
        limit:
          type: integer
          example: 1
          description: Limit record per page
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
